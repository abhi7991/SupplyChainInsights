{"custom_id": "request-0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 5 products managed by the Haiti Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 products with a molecule test type of 'HIV 1/2, Determine Complete HIV Kit'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 products have a pack price greater than 50?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 5 countries where products with a line item quantity greater than 100 are shipped.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply the top 3 products with the highest pack prices?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 brands associated with products managed by the PMO - US office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 product groups associated with products having a unit of measure per pack greater than 50.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 sub classes are assigned to products with a shipment number starting with 'ASN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products with a price quote of 'Pre-PQ Process' are managed by the South Africa Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 products with a line item quantity less than 300.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries linked by WEIGHT relationship to products with a molecule test type of 'HIV'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 offices manage products with a project code like '102-%'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 products under the product group 'ARV' managed by any office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 brands of products that have a 'Pediatric' subclass?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors are linked to the top 3 products having an item description that includes 'tablets'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups for products with a shipment number ending in '-128'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 sub classes are most common among products with a line item quantity over 500?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 countries where products with a 'HIV test' subclass are shipped.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-18", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 3 vendors who supply products to the Ethiopia Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the top 5 products with the highest pack prices?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands linked to products with a molecule test type including 'HIV'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are most frequently associated with products having a pack price less than 30?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 sub classes for products with a price quote status of 'Pre-PQ Process'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries receiving products with a unit of measure per pack of 60?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 vendors supply products that are managed by the Haiti Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 products from the 'ANTM' product group managed by any office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 brands associated with the most expensive products based on pack price?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 offices manage the most products with a shipment number starting with 'DN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups for products with a molecule test type that includes 'Abacavir'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 sub classes are linked to the most products with a project code starting with '100-CI'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-30", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries linked to products with a pack price of 44.05?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-31", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 vendors supply products with the highest line item quantities?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands linked to products managed by the South Africa Field Office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are linked to products with an item description including 'HIV Kit'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 sub classes for products managed by the PMO - US office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 3 vendors supplying products to countries with a shipment number like 'ASN-%'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-36", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the top 5 products with the smallest unit of measure per pack?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands of products that have a project code like '102-%'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are most frequently linked to products with a line item quantity less than 200?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 sub classes for products with a shipment number ending in '-71'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries receiving products with a molecule test type of 'Abacavir'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 vendors supply products with a price quote of 'Pre-PQ Process'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands linked to products with a unit of measure per pack of 100.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are linked to the most products managed by the Ethiopia Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 sub classes for products with a pack price greater than 75.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 3 vendors supplying products with a line item quantity greater than 1000?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the top 3 products with a project code starting with '100-CI'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands of products managed by the Haiti Field Office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are most common among products with a molecule test type of 'HIV'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 sub classes for products managed by any office with a project code like '102-%'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries linked to products with a unit of measure per pack less than 60?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 vendors supply the most products with a shipment number starting with 'DN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-52", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 brands linked to products with a line item quantity over 500.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which 3 product groups are linked to products with a shipment number like 'ASN-%'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 sub classes for products with a price quote of 'Pre-PQ Process'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 3 vendors supplying products with a pack price less than 30?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the most products with a molecule test type of 'HIV'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have a pack price greater than $50 and are managed by the PMO - US office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 products by line item quantity that are associated with the HIV test subclass.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the first 3 product groups associated with products that have a shipment number starting with 'DN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify products that are linked to the brand 'Aluvia' and have a molecule test type containing 'HIV'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products with a pack price less than $100?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the countries linked to products with a 'unit_of_measure_per_pack' greater than 50?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all products with a project code starting with '100' and having a 'price_quote' status of 'Pre-PQ Process'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 most common sub classes for products managed by the Ethiopia Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify products that are linked to the 'ARV' product group and have a shipment number ending with '8'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which office manages the product with the highest line item quantity?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 brands associated with products that have a 'unit_of_measure_per_pack' of 100.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the first 3 products that have a molecule test type related to 'HIV' and are managed by an office in Haiti?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the vendors supplying products to the South Africa Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: How many different product groups are associated with the products that have a shipment number starting with 'ASN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-71", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which countries receive products with a 'price_quote' status of 'Pre-PQ Process'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 5 products with the highest pack price managed by any field office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the product groups linked to products with a 'line_item_quantity' less than 20.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the first 3 products with a pid greater than 100 and linked to the 'HIV test' sub class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which brands are linked to products with a 'project_code' that starts with '102'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all offices that manage products associated with the 'ANTM' product group.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products are managed by the Haiti Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all products related to the vendor 'ABBOTT LABORATORIES (PUERTO RICO)'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the countries associated with products having more than 1000 units of line item quantity?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products are categorized under the Product_Group 'ARV'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-81", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Find the top 3 brands by the number of products they are associated with.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 5 most expensive products based on pack price?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify all products that have 'HIV test' as their sub class.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the project codes for products managed by the PMO - US office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all product IDs that have been shipped more than once.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products with a price quote of 'Pre-PQ Process'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: How many products are there in each product group?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which product groups are associated with products having a shipment number starting with 'ASN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the products with a unit of measure per pack greater than 50.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which Sub_Class categories are linked to more than 5 products?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all the products that have been shipped under shipment number 'ASN-608'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Find products that are linked to the brand 'Aluvia'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the distinct item descriptions available for products managed by the Ethiopia Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products to more than one country?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-95", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Show all products which have a molecule test type containing 'HIV 1/2'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: How many different offices manage products within the 'HIV test' sub class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products are managed by the Haiti Field Office and have a pack price greater than $100?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of vendors that supply products to the Ethiopia Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all products with a molecule test type containing 'HIV' that are managed by the PMO - US office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-100", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which brands are associated with products that have a pack price less than $50?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-101", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of countries where products with a pack price over $200 are sent?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-102", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: How many products under the ARV group have a line item quantity greater than 1000?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-103", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify products that are of the 'HIV test' sub class and have a unit of measure per pack of 100.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-104", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products with a project code starting with '102'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-105", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Find the top 5 products managed by the South Africa Field Office based on their pack price.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-106", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all product groups associated with products that have a shipment number 'ASN-608'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-107", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the brands associated with products that have a molecule test type including 'Efavirenz'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-108", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which office manages products with a shipment number 'DN-52'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-109", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all countries to which products grouped under MRDT are shipped.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-110", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Show the first 3 products of the 'Pediatric' sub class managed by the Haiti Field Office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-111", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of products with a project code '100-CI-T01'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-112", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have both an item description involving 'Tablets' and a project code ending in 'T01'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-113", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 5 most expensive products based on their pack price?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-114", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply the products under the ANTMs group with the highest pack prices?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-115", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all products with a line item quantity of 1500 or more that are managed by an office in the US.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-116", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify products that have a 'Pre-PQ Process' as their price quote and are associated with the brand 'Aluvia'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-117", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which countries receive the most number of products with molecule test type containing 'HIV 1/2'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-118", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the sub classes of products managed by the Ethiopia Field Office with a unit of measure per pack of 30.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-119", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products grouped under HRDT have a shipment number starting with 'DN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-120", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the brands of products that are managed by offices outside of the US.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: How many products with a molecule test type including 'Rapid' are managed by the PMO - US office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-122", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the offices that manage products with a price quote status of 'Pre-PQ Process' and a shipment number containing '608'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-123", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors are associated with products shipped under shipment number 'ASN-8'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-124", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the product groups for products that have 'Efavirenz' in their item description?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-125", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the countries to which products categorized under the 'Adult' sub class are shipped.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-126", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Show the first 3 products that are linked to the brand name 'Aluvia' and have a unit of measure per pack less than 50.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-127", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have a pack price between $30 and $100 and are managed by an office located in South Africa?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-128", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the sub classes for products that have a project code starting with '100' and are managed by an office in the US.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-129", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the brands associated with products that have a project code '102-NG-T01'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-130", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products with a molecule test type 'Efavirenz'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-131", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List all countries where products under the 'HIV test - Ancillary' sub class are sent.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-132", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products that are part of the 'ARV' group and have a shipment number starting with 'ASN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-133", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Find the top 5 most frequently shipped products to Afghanistan.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the products that have an item description containing 'Rapid Test' and a shipment number 'DN-112'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-135", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the product groups associated with products managed by the Haiti Field Office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-136", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Show the first 3 brands associated with products that have an item description including 'HIV Kit'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-137", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which countries receive products from vendors named 'ABBOTT LABORATORIES (PUERTO RICO)'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of products managed by the Ethiopia Field Office with a line item quantity less than 20?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-139", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products to offices that manage more than 3 different types of product groups?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-140", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the offices that manage products under the 'Malaria' sub class.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-141", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the brands of products that have a project code ending in 'T01' and are associated with the 'ANTM' group.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-142", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which countries are linked to products with a shipment number that includes '52'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-143", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the products that have a unit of measure per pack of 30 and are managed by the PMO - US office.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-144", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Show the top 3 most expensive products managed by any office based on their pack price.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-145", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the products that are part of the 'Pediatric' sub class and have a shipment number 'ASN-608'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-146", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products with a pack price less than $50 and are managed by the South Africa Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-147", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the names of product groups for products that have a project code '100-HT-T01'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-148", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the countries where products with a molecule test type containing 'OraQuick' are sent.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-149", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products categorized under the 'HIV test' sub class with a pack price over $200?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-150", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the brands associated with products that have a shipment number starting with 'DN' and a molecule test type including 'HIV'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-151", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of products with a pack price over $150 managed by the Haiti Field Office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-152", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 5 brands by the number of products available?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-153", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 countries with the highest number of products shipped based on the shipment number.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-154", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply the top 5 most expensive products based on pack price?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-155", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 product groups with the most diverse range of item descriptions.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-156", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 5 sub-classes by the variety of molecule test types they include?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-157", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the highest number of products in the 'HIV test' sub-class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-158", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 brands that have the most products associated with the 'ACT' product group?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-159", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 vendors by the number of products with a unit of measure per pack greater than 50.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-160", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 offices by the number of products managed with a shipment number starting with 'ASN-'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-161", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which countries receive products with the highest average pack prices and list the top 3?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-162", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 5 products by line item quantity in the 'ANTM' product group?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-163", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 highest weight relationships from products to countries.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-164", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which sub-classes have products with a unit of measure per pack of exactly 100 and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-165", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 offices managing products with the 'Pre-PQ Process' price quote?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-166", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups associated with the most brands.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-167", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which brands are linked to products managed by the 'Haiti Field Office' and list the top 3?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-168", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 vendors supplying products to 'South Africa Field Office' managed products?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-169", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups by the average pack price of their products.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-170", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which sub-classes are associated with products having a shipment number starting with 'DN-' and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-171", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 countries by the total weight of products shipped to them?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-172", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products with 'HIV 1/2, Determine Complete HIV Kit' as their molecule test type and list the top 3?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-173", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 products with the highest pack prices in the 'HIV test - Ancillary' sub-class.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-174", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 3 brands with the lowest average pack price per product?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-175", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products with '30 Tests' in their item description and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-176", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups with products having more than one molecule test type listed.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-177", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 sub-classes with the most products having '100-CI-T01' as their project code?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-178", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage the highest number of products in the 'ARV' product group and list the top 3?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-179", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 countries receiving products from 'ABBOTT LABORATORIES (PUERTO RICO)' based on the shipment number.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-180", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 brands with products having the highest line item quantity?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-181", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products with the 'Pre-PQ Process' price quote and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-182", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 countries receiving the least quantity of products based on line item quantity.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 product groups by the number of different shipment numbers associated with their products?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-184", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which sub-classes have the most products with a pack price over $100 and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-185", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 offices managing products with the highest average unit of measure per pack.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-186", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the top 5 products by pack price in the 'Pediatric' sub-class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-187", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply the most products with the 'HIV test' sub-class and list the top 5?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-188", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 product groups with the lowest average pack prices.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-189", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 3 sub-classes with the least diversity in molecule test types?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-190", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products with the lowest average pack price and list the top 3?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-191", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 5 countries receiving products with a shipment number starting with 'DN-'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-192", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have a line item quantity of '10000' and are managed by the PMO - US office?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-193", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the brands associated with products that have a 'Pre-PQ Process' price quote?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the names of the sub-classes for products that have a pack price of '80.0'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-195", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the top 3 countries by the total weight of products shipped to them.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-196", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products are in the 'ARV' product group and have a project code starting with '100'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-197", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the top 5 vendors supplying the 'HIV 1/2, Determine Complete HIV Kit'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-198", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: For products managed by the Haiti Field Office, what are the various product groups they belong to?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-199", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the top 3 product descriptions for products that have been shipped under shipment number 'ASN-608'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-200", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which offices manage products that are part of the 'Adult' sub-class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-201", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the countries associated with products that have a molecule test type containing 'Efavirenz'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-202", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have a unit of measure per pack of '30' and are in the 'HIV test' sub-class?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-203", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Name the top 5 products (by pid) that have a 'Pre-PQ Process' price quote and are in the 'Malaria' sub-class.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-204", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the brands associated with products that have a pack price over '50.0'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-205", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which vendors supply products to the Ethiopia Field Office that have a molecule test type of 'HIV 1/2, Determine Complete HIV Kit'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-206", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the product groups for the top 3 products with the highest line item quantity.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-207", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: What are the names of the offices that manage products with a shipment number starting with 'DN'?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-208", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Identify the product descriptions for products that are managed by the South Africa Field Office and have a pack price of '29.0'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-209", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Which products have a project code '102-NG-T01' and are associated with the 'ACT' product group?\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-210", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: Name the brands associated with products that have the item description containing 'tablets'.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
{"custom_id": "request-211", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "Given an input question, convert it to a Cypher query. No pre-amble.\nAdditional instructions:\n- Ensure that queries checking for non-null properties use `IS NOT NULL` in a straightforward manner.\n- Don't use `size((n)--(m))` for counting relationships. Instead use the new `count{(n)--(m))}` syntax.\n- Incorporate the new existential subqueries in examples where the query needs to check for the existence of a pattern.\n  Example: MATCH (p:Person)-[r:IS_FRIENDS_WITH]->(friend:Person)\n            WHERE exists{ (p)-[:WORKS_FOR]->(:Company {name: 'Neo4j'})}\n            RETURN p, r, friend"}, {"role": "user", "content": "Based on the Neo4j graph schema below, write a Cypher query that would answer the user's question:\n    Node properties:\n- **Product**\n  - `line_item_quantity`: STRING Example: \"19\"\n  - `pack_price`: STRING Example: \"29.0\"\n  - `molecule_test_type`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test\"\n  - `unit_of_measure_per_pack`: STRING Example: \"30\"\n  - `shipment_number`: STRING Example: \"ASN-8\"\n  - `pid`: INTEGER Min: 1, Max: 16\n  - `item_description`: STRING Example: \"HIV, Reveal G3 Rapid HIV-1 Antibody Test, 30 Tests\"\n  - `project_code`: STRING Example: \"100-CI-T01\"\n  - `price_quote`: STRING Example: \"Pre-PQ Process\"\n- **Country**\n  - `name`: STRING Example: \"Afghanistan\"\n- **Vendor**\n  - `name`: STRING Example: \"ABBOTT LABORATORIES (PUERTO RICO)\"\n- **Brand**\n  - `name`: STRING Example: \"Aluvia\"\n- **Product_Group**\n  - `name`: STRING Available options: ['ACT', 'ANTM', 'ARV', 'HRDT', 'MRDT']\n- **Sub_Class**\n  - `name`: STRING Available options: ['ACT', 'Adult', 'HIV test', 'HIV test - Ancillary', 'Malaria', 'Pediatric']\n- **Office**\n  - `name`: STRING Available options: ['Ethiopia Field Office', 'Haiti Field Office', 'PMO - US', 'South Africa Field Office']\nRelationship properties:\n- **WEIGHT**\n  - `weight: FLOAT` Example: \"0.0\"\nThe relationships:\n(:Product)-[:WEIGHT]->(:Country)\n(:Product)-[:BRAND]->(:Brand)\n(:Product)-[:GROUP]->(:Product_Group)\n(:Product)-[:SUB_CLASS]->(:Sub_Class)\n(:Vendor)-[:VENDOR]->(:Product)\n(:Office)-[:MANAGED_BY]->(:Product)\n    \n    Question: List the countries where products with a 'HIV test - Ancillary' sub-class are shipped to.\n    Cypher query:"}], "max_tokens": 1000, "temperature": 0}}
